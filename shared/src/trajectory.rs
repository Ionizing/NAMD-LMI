use std::fmt;
use std::path::Path;
use std::fs;
use std::io::prelude::*;
use std::io::BufWriter;

use crate::Result;
use crate::log;
use super::Structure;

pub struct Trajectory {
    dat: Vec<Structure>,
}


impl From<Vec<Structure>> for Trajectory {
    fn from(dat: Vec<Structure>) -> Self {
        Self { dat }
    }
}


pub struct XdatcarBuilder<'a> {
    dat: &'a [Structure]
}


impl<'a> XdatcarBuilder<'a> {
    pub fn save_as_xdatcar<P>(&self, fname: P) -> Result<()>
    where P: AsRef<Path> {
        let mut f = BufWriter::new(
            fs::OpenOptions::new()
                .create(true)
                .truncate(true)
                .write(true)
                .open(&fname)?
        );

        log::info!("Saving trajectory to {:?} ...", fname.as_ref());
        write!(f, "{}", self)?;

        f.flush().unwrap();
        Ok(())
    }
}


impl<'a> From<&'a Trajectory> for XdatcarBuilder<'a> {
    fn from(t: &'a Trajectory) -> Self {
        Self { dat: t.dat.as_ref() }
    }
}


impl<'a> fmt::Display for XdatcarBuilder<'a> {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        for (i, v) in self.dat.iter().enumerate() {
            //
            // ------
            // Generated by rsgrad
            //    1.000000
            //    [ax, ay, az]
            //    [bx, by, bz]
            //    [cx, cy, cz]
            //    H
            //    1
            // Direct configuration=     1
            //  0.00000000 0.00000000 0.00000000
            // Generated by rsgrad
            //    1.000000
            //    [ax, ay, az]
            //    [bx, by, bz]
            //    [cx, cy, cz]
            //    H
            //    1
            // Direct configuration=     1
            //  0.00000000 0.00000000 0.00000000
            // ...
            // ...
            // ------
            writeln!(f, "Generated by rsgrad")?;
            writeln!(f, "{:15.9}", 1.0)?;
            for row in v.cell.iter() {
                writeln!(f, " {:12.6}{:12.6}{:12.6}", row[0], row[1], row[2])?;
            }

            for elem in v.ion_types.iter() {
                write!(f, "{:>4}", elem)?;
            }
            writeln!(f)?;
            for nelm in v.ions_per_type.iter() {
                write!(f, "{:>4}", nelm)?;
            }
            writeln!(f)?;

            writeln!(f, "Direct configuration={:6}", i+1)?;
            for row in v.frac_pos.iter() {
                writeln!(f, " {:15.9} {:15.9} {:15.9}", row[0], row[1], row[2])?;
            }
        }

        Ok(())
    }
}
